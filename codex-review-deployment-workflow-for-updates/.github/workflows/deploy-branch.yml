name: Deploy GitHub Pages previews

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: pages-deployments
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deploy-pages.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Sync branch to gh-pages
        id: sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message || '' }}
          COMMIT_TIMESTAMP: ${{ github.event.head_commit.timestamp || '' }}
        run: |
          set -euo pipefail

          BRANCH_NAME="${GITHUB_REF_NAME}"
          SAFE_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          TARGET_DIR="."
          TARGET_KEY="main"

          if [ "$BRANCH_NAME" = "main" ]; then
            SAFE_NAME=""
          else
            TARGET_DIR="$SAFE_NAME"
            TARGET_KEY="$SAFE_NAME"
          fi

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          rm -rf pages
          if git ls-remote --exit-code origin gh-pages >/dev/null 2>&1; then
            git clone --depth=1 --branch gh-pages "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" pages
          else
            mkdir pages
            git -C pages init
            git -C pages checkout -b gh-pages
            git -C pages remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            touch pages/.nojekyll
            git -C pages add .nojekyll
            git -C pages commit -m "Initialize gh-pages"
            git -C pages push origin gh-pages
          fi

          cd pages

          touch .nojekyll
          MANIFEST=".branch-manifest"
          touch "$MANIFEST"

          RSYNC_ARGS=(
            "--exclude=.git/"
            "--exclude=.github/"
            "--exclude=.github"
            "--exclude=node_modules/"
            "--exclude=pages/"
            "--exclude=.branch-manifest"
            "--exclude=deployments.json"
            "--exclude=branch.html"
            "--exclude=.gitignore"
            "--exclude=.gitattributes"
            "--exclude=.DS_Store"
          )

          if [ "$TARGET_DIR" = "." ]; then
            EXTRA_EXCLUDES=()
            while IFS= read -r entry; do
              [ -n "$entry" ] || continue
              EXTRA_EXCLUDES+=("--exclude=${entry}/")
            done < "$MANIFEST"

            rsync -a --delete "${RSYNC_ARGS[@]}" "${EXTRA_EXCLUDES[@]}" ../ ./
          else
            rm -rf "$TARGET_DIR"
            mkdir -p "$TARGET_DIR"
            rsync -a --delete "${RSYNC_ARGS[@]}" ../ "$TARGET_DIR/"
            if ! grep -qxF "$TARGET_KEY" "$MANIFEST"; then
              echo "$TARGET_KEY" >> "$MANIFEST"
            fi
          fi

          DEPLOY_DATA="deployments.json"
          if [ ! -f "$DEPLOY_DATA" ]; then
            echo '{}' > "$DEPLOY_DATA"
          fi

          MESSAGE="$COMMIT_MESSAGE"
          if [ -z "$MESSAGE" ]; then
            MESSAGE=$(git -C .. log -1 --pretty=%B | head -n 1)
          fi

          TIMESTAMP="$COMMIT_TIMESTAMP"
          if [ -z "$TIMESTAMP" ]; then
            TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          fi

          jq --arg key "$TARGET_KEY" \
             --arg branch "$BRANCH_NAME" \
             --arg safe "$SAFE_NAME" \
             --arg commit "${GITHUB_SHA}" \
             --arg message "$MESSAGE" \
             --arg actor "${GITHUB_ACTOR}" \
             --arg timestamp "$TIMESTAMP" \
             --arg url "https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}" \
             '.[$key] = {
               branch: $branch,
               safeName: $safe,
               commit: $commit,
               message: $message,
               actor: $actor,
               deployedAt: $timestamp,
               commitUrl: $url
             }' "$DEPLOY_DATA" > "$DEPLOY_DATA.tmp"
          mv "$DEPLOY_DATA.tmp" "$DEPLOY_DATA"

          cat > branch.html <<'HTML'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Capy Branch Deployments</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", sans-serif;
                max-width: 960px;
                margin: 40px auto;
                padding: 0 20px 40px;
                line-height: 1.6;
                color: #24292e;
                background: #f6f8fa;
              }
              h1 {
                margin-bottom: 16px;
              }
              ul.deployments {
                list-style: none;
                padding: 0;
                margin: 0;
                display: grid;
                gap: 16px;
              }
              li.card {
                background: #fff;
                border: 1px solid #d0d7de;
                border-radius: 8px;
                padding: 16px;
                box-shadow: 0 1px 0 rgba(31,35,40,0.04);
              }
              li.card.main {
                border-color: #4c8eda;
                box-shadow: 0 4px 12px rgba(76,142,218,0.12);
              }
              a.branch-link {
                font-weight: 600;
                color: #0969da;
                text-decoration: none;
              }
              a.branch-link:hover {
                text-decoration: underline;
              }
              span.badge {
                display: inline-block;
                margin-left: 8px;
                padding: 2px 8px;
                font-size: 12px;
                font-weight: 600;
                color: #0f5132;
                background: #d1e7dd;
                border-radius: 999px;
                text-transform: uppercase;
                letter-spacing: 0.04em;
              }
              .message {
                margin-top: 8px;
                color: #24292e;
              }
              .meta {
                margin-top: 8px;
                font-size: 0.9em;
                color: #57606a;
              }
              .meta a {
                color: #57606a;
                font-weight: 600;
              }
            </style>
          </head>
          <body>
            <h1>Capy Branch Deployments</h1>
            <ul class="deployments">
          HTML

          jq -r '
            def html_escape:
              gsub("&"; "&amp;") |
              gsub("<"; "&lt;") |
              gsub(">"; "&gt;") |
              gsub("\""; "&quot;") |
              gsub("'"; "&#39;");

            def first_line($text):
              ($text // "") | split("\n") | .[0];

            def render($entry):
              ($entry.value | {
                branch: (.branch // ""),
                safe: (.safeName // ""),
                message: first_line(.message),
                deployed: (.deployedAt // "unknown"),
                actor: (.actor // "unknown"),
                commit: (.commit // ""),
                url: (.commitUrl // "#")
              }) as $data |
              if $entry.key == "main" then
                "<li class=\"card main\"><a class=\"branch-link\" href=\"./\">main<span class=\"badge\">production</span></a>" +
                (if $data.message != "" then "<div class=\"message\">" + ($data.message | html_escape) + "</div>" else "" end) +
                "<div class=\"meta\">Last deployed " + ($data.deployed | html_escape) +
                " by " + ($data.actor | html_escape) +
                " · <a href=\"" + $data.url + "\">" + ($data.commit[:7]) + "</a></div></li>"
              else
                "<li class=\"card\"><a class=\"branch-link\" href=\"./" + $data.safe + "/\">" +
                ($data.branch | html_escape) + "</a>" +
                (if $data.message != "" then "<div class=\"message\">" + ($data.message | html_escape) + "</div>" else "" end) +
                "<div class=\"meta\">Last deployed " + ($data.deployed | html_escape) +
                " by " + ($data.actor | html_escape) +
                " · <a href=\"" + $data.url + "\">" + ($data.commit[:7]) + "</a></div></li>"
              end;

            def ordered_entries:
              (if has("main") then [{key: "main", value: .main}] else [] end) +
              ([to_entries[] | select(.key != "main")] | sort_by(.value.deployedAt // "") | reverse);

            ordered_entries | map(render(.)) | .[]
          ' "$DEPLOY_DATA" >> branch.html

          cat >> branch.html <<'HTML'
            </ul>
          </body>
          </html>
          HTML

          git add -A
          if [ -n "$(git status --short)" ]; then
            git commit -m "Deploy ${BRANCH_NAME} (${GITHUB_SHA})"
            git push origin gh-pages
          else
            echo "No changes to commit"
          fi

          BASE_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
          if [ -z "$SAFE_NAME" ]; then
            PREVIEW_URL="${BASE_URL}/"
          else
            PREVIEW_URL="${BASE_URL}/${SAFE_NAME}/"
          fi

          echo "preview_url=${PREVIEW_URL}" >> "$GITHUB_OUTPUT"
          echo "Branch deployed to: ${PREVIEW_URL}"

          cd ..

      - name: Prepare Pages artifact
        run: |
          set -euo pipefail
          rm -rf site
          mkdir -p site
          rsync -a --exclude='.git/' pages/ site/

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deploy-pages
        uses: actions/deploy-pages@v4

      - name: Preview URL
        run: echo "Preview available at ${{ steps.sync.outputs.preview_url }}"
