From 8cb89f4aed518e55bff6d754bd3b91b10cf89e96 Mon Sep 17 00:00:00 2001
From: Codex <codex@openai.com>
Date: Mon, 20 Oct 2025 01:12:08 +0000
Subject: [PATCH] Update workflow and scripts from main for deployment

- Update deploy-branch.yml to latest version with Node.js scripts
- Add missing deployment scripts (update-deployments.mjs, render-branch-page.mjs, build-pages-site.mjs, generate_readme_html.py)
- Fixes deployment failure for PR #181
---
 .github/workflows/deploy-branch.yml | 762 +++-------------------------
 scripts/build-pages-site.mjs        | 245 +++++++++
 scripts/generate_readme_html.py     |  96 ++++
 scripts/render-branch-page.mjs      | 667 ++++++++++++++++++++++++
 scripts/update-deployments.mjs      | 176 +++++++
 5 files changed, 1259 insertions(+), 687 deletions(-)
 create mode 100644 scripts/build-pages-site.mjs
 create mode 100644 scripts/generate_readme_html.py
 create mode 100644 scripts/render-branch-page.mjs
 create mode 100644 scripts/update-deployments.mjs

diff --git a/.github/workflows/deploy-branch.yml b/.github/workflows/deploy-branch.yml
index 6f12015..3c3d7ee 100644
--- a/.github/workflows/deploy-branch.yml
+++ b/.github/workflows/deploy-branch.yml
@@ -20,7 +20,7 @@ jobs:
       cancel-in-progress: false
     environment:
       name: github-pages
-      url: ${{ steps.deploy-pages.outputs.page_url }}
+      url: ${{ steps.sync.outputs.preview_url || steps.deploy-pages.outputs.page_url }}
     steps:
       - name: Checkout repository
         uses: actions/checkout@v4
@@ -111,7 +111,8 @@ jobs:
                 prs = prData.map(pr => ({
                   number: pr.number,
                   title: pr.title,
-                  url: pr.html_url
+                  url: pr.html_url,
+                  branch: pr.head?.ref ?? null
                 }));
               } catch (error) {
                 core.warning(`Could not fetch PRs for commit ${commit.sha}: ${error.message}`);
@@ -173,7 +174,8 @@ jobs:
                 const prInfo = {
                   number: pr.number,
                   title: pr.title,
-                  url: pr.url ?? pr.html_url ?? null
+                  url: pr.url ?? pr.html_url ?? null,
+                  branch: pr.branch ?? null
                 };
 
                 const commitsWithMetadata = commits.map((commit) => ({
@@ -243,6 +245,54 @@ jobs:
           MANIFEST=".branch-manifest"
           touch "$MANIFEST"
 
+          EXISTING_MANIFEST=()
+          if [ -s "$MANIFEST" ]; then
+            mapfile -t EXISTING_MANIFEST < "$MANIFEST"
+          fi
+
+          ACTIVE_SAFE_NAMES=()
+          if [ -f "../pr-branches.json" ]; then
+            mapfile -t ACTIVE_SAFE_NAMES < <(
+              jq -r '
+                map(select(.branch != null))
+                | map(.safeName // (.branch | gsub("[^A-Za-z0-9._-]"; "-")))
+                | map(select(length > 0))
+                | unique[]
+              ' ../pr-branches.json 2>/dev/null
+            ) || ACTIVE_SAFE_NAMES=()
+          fi
+
+          if [ -n "$SAFE_NAME" ]; then
+            ACTIVE_SAFE_NAMES+=("$SAFE_NAME")
+          fi
+
+          declare -A ACTIVE_SET=()
+          UNIQUE_SAFE_NAMES=()
+          for name in "${ACTIVE_SAFE_NAMES[@]}"; do
+            name="${name//$'\r'/}"
+            [ -n "$name" ] || continue
+            if [ -z "${ACTIVE_SET[$name]:-}" ]; then
+              UNIQUE_SAFE_NAMES+=("$name")
+              ACTIVE_SET[$name]=1
+            fi
+          done
+
+          for entry in "${EXISTING_MANIFEST[@]}"; do
+            entry="${entry//$'\r'/}"
+            [ -n "$entry" ] || continue
+            if [ -z "${ACTIVE_SET[$entry]:-}" ]; then
+              rm -rf "$entry"
+            fi
+          done
+
+          if [ "${#UNIQUE_SAFE_NAMES[@]}" -gt 0 ]; then
+            printf '%s\n' "${UNIQUE_SAFE_NAMES[@]}" > "$MANIFEST"
+            ACTIVE_JSON=$(printf '%s\n' "${UNIQUE_SAFE_NAMES[@]}" | python -c 'import json, sys; print(json.dumps([line.strip() for line in sys.stdin if line.strip()]))') || ACTIVE_JSON='[]'
+          else
+            : > "$MANIFEST"
+            ACTIVE_JSON='[]'
+          fi
+
           generate_readme_html() {
             local target_root="$1"
             local source_file="../README.md"
@@ -252,98 +302,15 @@ jobs:
               return 0
             fi
 
-            local tmp_html
-            tmp_html=$(mktemp)
-
-            if ! npx --yes marked@9.1.3 --gfm --breaks "$source_file" > "$tmp_html"; then
-              echo "Warning: README markdown to HTML conversion failed" >&2
-              rm -f "$tmp_html"
-              return 0
-            fi
-
             local output_dir="$target_root/README"
             local output_file="$output_dir/index.html"
             rm -rf "$output_dir"
             mkdir -p "$output_dir"
 
-            TEMP_HTML="$tmp_html" OUT_FILE="$output_file" python - <<'PY'
-import datetime
-import os
-import pathlib
-
-temp_html = pathlib.Path(os.environ["TEMP_HTML"])
-out_file = pathlib.Path(os.environ["OUT_FILE"])
-
-content = temp_html.read_text()
-indented = "\n".join(f"    {line}" for line in content.splitlines())
-
-generated = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M UTC")
-
-template = f"""<!DOCTYPE html>
-<html lang=\"en\">
-<head>
-  <meta charset=\"utf-8\">
-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
-  <title>Capy README</title>
-  <style>
-    :root {{
-      color-scheme: light dark;
-    }}
-    body {{
-      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", sans-serif;
-      margin: 0 auto;
-      padding: 32px 16px 48px;
-      max-width: 920px;
-      line-height: 1.6;
-      background: #f6f8fa;
-      color: #1f2328;
-    }}
-    a {{
-      color: #0969da;
-    }}
-    .markdown-body {{
-      background: #fff;
-      border-radius: 12px;
-      padding: 32px;
-      box-shadow: 0 16px 40px rgba(15, 23, 42, 0.08);
-      border: 1px solid #d0d7de;
-    }}
-    .page-meta {{
-      margin-top: 24px;
-      font-size: 0.85em;
-      color: #57606a;
-      text-align: center;
-    }}
-    pre {{
-      background: #0d1117;
-      color: #f0f6fc;
-      padding: 16px;
-      border-radius: 8px;
-      overflow-x: auto;
-    }}
-    code {{
-      font-family: SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, monospace;
-    }}
-    @media (max-width: 720px) {{
-      .markdown-body {{
-        padding: 24px 20px;
-      }}
-    }}
-  </style>
-</head>
-<body>
-  <main class=\"markdown-body\">
-{indented}
-  </main>
-  <footer class=\"page-meta\">Generated from README.md Â· {generated}</footer>
-</body>
-</html>
-"""
-
-out_file.write_text(template)
-PY
-
-            rm -f "$tmp_html"
+            if ! node ../scripts/build-pages-site.mjs --source "$source_file" --output "$output_file" --mode gfm --context "${GITHUB_REPOSITORY}"; then
+              echo "Warning: README markdown to HTML conversion failed" >&2
+              return 0
+            fi
           }
 
           RSYNC_ARGS=(
@@ -362,12 +329,12 @@ PY
 
           if [ "$TARGET_DIR" = "." ]; then
             EXTRA_EXCLUDES=()
-            while IFS= read -r entry; do
+            for entry in "${UNIQUE_SAFE_NAMES[@]}"; do
               [ -n "$entry" ] || continue
               EXTRA_EXCLUDES+=("--exclude=${entry}/")
-            done < "$MANIFEST"
+            done
 
-            rsync -a --delete "${RSYNC_ARGS[@]}" "${EXTRA_EXCLUDES[@]}" ../ ./
+            rsync -a --delete --force "${RSYNC_ARGS[@]}" "${EXTRA_EXCLUDES[@]}" ../ ./
             generate_readme_html "."
           else
             rm -rf "$TARGET_DIR"
@@ -407,216 +374,17 @@ PY
             TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
           fi
 
-          jq --arg key "$TARGET_KEY" \
-             --arg branch "$BRANCH_NAME" \
-             --arg safe "$SAFE_NAME" \
-             --arg commit "${GITHUB_SHA}" \
-             --arg message "$MESSAGE" \
-             --arg actor "${GITHUB_ACTOR}" \
-             --arg timestamp "$TIMESTAMP" \
-             --arg url "https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}" \
-             '.[$key] = {
-               branch: $branch,
-               safeName: $safe,
-               commit: $commit,
-               message: $message,
-               actor: $actor,
-               deployedAt: $timestamp,
-               commitUrl: $url
-             }' "$DEPLOY_DATA" > "$DEPLOY_DATA.tmp"
-          mv "$DEPLOY_DATA.tmp" "$DEPLOY_DATA"
-
-          cat > branch.html <<'HTML'
-          <!DOCTYPE html>
-          <html lang="en">
-          <head>
-            <meta charset="utf-8">
-            <meta name="viewport" content="width=device-width, initial-scale=1">
-            <title>Capy Branch Deployments</title>
-            <style>
-              body {
-                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", sans-serif;
-                max-width: 960px;
-                margin: 40px auto;
-                padding: 0 20px 40px;
-                line-height: 1.6;
-                color: #24292e;
-                background: #f6f8fa;
-              }
-              h1 {
-                margin-bottom: 16px;
-              }
-              ul.deployments {
-                list-style: none;
-                padding: 0;
-                margin: 0;
-                display: grid;
-                gap: 16px;
-              }
-              li.card {
-                background: #fff;
-                border: 1px solid #d0d7de;
-                border-radius: 8px;
-                padding: 16px;
-                box-shadow: 0 1px 0 rgba(31,35,40,0.04);
-              }
-              li.card.main {
-                border-color: #4c8eda;
-                box-shadow: 0 4px 12px rgba(76,142,218,0.12);
-              }
-              .card-header {
-                display: flex;
-                flex-wrap: wrap;
-                justify-content: space-between;
-                align-items: baseline;
-                gap: 12px;
-              }
-              .branch-title {
-                display: flex;
-                flex-wrap: wrap;
-                align-items: baseline;
-                gap: 8px;
-              }
-              .branch-name {
-                font-size: 1.1em;
-                font-weight: 600;
-                color: #1f2328;
-              }
-              .commit-section {
-                margin-top: 16px;
-                padding-top: 12px;
-                border-top: 1px solid #d0d7de;
-              }
-              .commit-title {
-                font-size: 0.95em;
-                font-weight: 600;
-                margin-bottom: 8px;
-                color: #24292e;
-              }
-              .commit-list {
-                list-style: none;
-                margin: 0;
-                padding: 0;
-                display: grid;
-                gap: 6px;
-              }
-              .commit-item {
-                font-size: 0.9em;
-                color: #24292e;
-                display: flex;
-                flex-wrap: wrap;
-                align-items: baseline;
-                gap: 6px;
-              }
-              .commit-date {
-                color: #57606a;
-                font-weight: 500;
-              }
-              .commit-separator {
-                color: #8c959f;
-                margin: 0 4px;
-              }
-              .commit-message {
-                font-weight: 500;
-                color: #24292e;
-              }
-              .commit-sha {
-                font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace;
-                font-size: 0.9em;
-                font-weight: 600;
-                color: #0969da;
-                text-decoration: none;
-              }
-              .commit-sha:hover {
-                text-decoration: underline;
-              }
-              .card-links {
-                display: flex;
-                flex-wrap: wrap;
-                align-items: center;
-                gap: 12px;
-                font-size: 0.85em;
-              }
-              .card-link {
-                color: #0969da;
-                font-weight: 600;
-                text-decoration: none;
-              }
-              .card-link:hover {
-                text-decoration: underline;
-              }
-              .card-actions {
-                display: flex;
-                flex-wrap: wrap;
-                align-items: center;
-                gap: 12px;
-                font-size: 0.85em;
-              }
-              .card-actions a {
-                color: #57606a;
-                font-weight: 600;
-                text-decoration: none;
-              }
-              .card-actions a:hover {
-                color: #24292e;
-                text-decoration: underline;
-              }
-              .card-actions {
-                display: flex;
-                flex-wrap: wrap;
-                align-items: center;
-                gap: 12px;
-                font-size: 0.85em;
-              }
-              .card-actions a {
-                color: #57606a;
-                font-weight: 600;
-                text-decoration: none;
-              }
-              .card-actions a:hover {
-                color: #24292e;
-                text-decoration: underline;
-              }
-              span.badge {
-                display: inline-block;
-                margin-left: 4px;
-                padding: 2px 8px;
-                font-size: 12px;
-                font-weight: 600;
-                color: #0f5132;
-                background: #d1e7dd;
-                border-radius: 999px;
-                text-transform: uppercase;
-                letter-spacing: 0.04em;
-              }
-              .meta {
-                margin-top: 8px;
-                font-size: 0.9em;
-                color: #57606a;
-              }
-              .meta a {
-                color: #57606a;
-                font-weight: 600;
-              }
-              .pr-meta {
-                margin-top: 6px;
-                font-size: 0.85em;
-                color: #57606a;
-              }
-              .pr-link {
-                color: #8250df;
-                font-weight: 600;
-                text-decoration: none;
-              }
-              .pr-link:hover {
-                text-decoration: underline;
-              }
-            </style>
-          </head>
-          <body>
-            <h1>Capy Branch Deployments</h1>
-            <ul class="deployments">
-          HTML
+          DEPLOY_DATA_PATH="$DEPLOY_DATA" \
+          DEPLOY_BRANCH="$BRANCH_NAME" \
+          DEPLOY_SAFE_NAME="$SAFE_NAME" \
+          DEPLOY_COMMIT="${GITHUB_SHA}" \
+          DEPLOY_MESSAGE="$MESSAGE" \
+          DEPLOY_ACTOR="${GITHUB_ACTOR}" \
+          DEPLOY_TIMESTAMP="$TIMESTAMP" \
+          DEPLOY_URL="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}" \
+          DEPLOY_TARGET_KEY="$TARGET_KEY" \
+          DEPLOY_ACTIVE="$ACTIVE_JSON" \
+          node ../scripts/update-deployments.mjs
 
           PR_DATA_FILE="../pr-branches.json"
           MAIN_DATA_FILE="../main-branch-data.json"
@@ -632,394 +400,14 @@ PY
             echo '{}' > "$BRANCH_COMMITS_FILE"
           fi
 
+          BRANCH_HTML_PATH="branch.html"
+
           DEPLOY_DATA_PATH="$DEPLOY_DATA" \
           PR_DATA_PATH="$PR_DATA_FILE" \
           MAIN_DATA_PATH="$MAIN_DATA_FILE" \
           BRANCH_COMMITS_PATH="$BRANCH_COMMITS_FILE" \
-          node <<'NODE'
-          const fs = require('fs');
-
-          const readJson = (path, fallback) => {
-            try {
-              return JSON.parse(fs.readFileSync(path, 'utf8'));
-            } catch (error) {
-              return fallback;
-            }
-          };
-
-          const deployments = readJson(process.env.DEPLOY_DATA_PATH, {});
-          const prList = readJson(process.env.PR_DATA_PATH, []);
-          const mainData = readJson(process.env.MAIN_DATA_PATH, { commits: [] });
-          const branchCommits = readJson(process.env.BRANCH_COMMITS_PATH, {});
-          const repoSlug = process.env.GITHUB_REPOSITORY ?? '';
-          const githubBaseUrl = repoSlug ? `https://github.com/${repoSlug}` : '';
-          const githubBranchUrl = (branch) => {
-            if (!githubBaseUrl) {
-              return '';
-            }
-
-            const name = String(branch ?? '').trim();
-            if (!name) {
-              return '';
-            }
-
-            return `${githubBaseUrl}/tree/${encodeURIComponent(name)}`;
-          };
-
-          const htmlEscape = (value) => String(value ?? '')
-            .replace(/&/g, '&amp;')
-            .replace(/</g, '&lt;')
-            .replace(/>/g, '&gt;')
-            .replace(/"/g, '&quot;')
-            .replace(/'/g, '&#39;');
-
-          const firstLine = (text) => {
-            const str = String(text ?? '');
-            const newlineIndex = str.indexOf('\n');
-            return newlineIndex === -1 ? str : str.slice(0, newlineIndex);
-          };
-
-          const formatDate = (value) => {
-            if (!value) {
-              return { text: '', iso: '' };
-            }
-
-            const date = new Date(value);
-            if (Number.isNaN(date.getTime())) {
-              return { text: '', iso: '' };
-            }
-
-            const parts = new Intl.DateTimeFormat('en-US', {
-              weekday: 'short',
-              year: 'numeric',
-              month: 'short',
-              day: '2-digit',
-              hour: 'numeric',
-              minute: '2-digit',
-              hour12: true
-            }).formatToParts(date);
-
-            const get = (type) => {
-              const part = parts.find((entry) => entry.type === type);
-              return part ? part.value : '';
-            };
-
-            const month = get('month');
-            const rawDay = get('day');
-            const day = rawDay ? rawDay.padStart(2, '0') : '';
-            const year = get('year');
-            const hour = get('hour');
-            const minute = get('minute');
-            const period = get('dayPeriod');
-            const weekday = get('weekday');
-
-            if (!month || !day || !year || !hour || !minute || !period || !weekday) {
-              return { text: '', iso: '' };
-            }
-
-            const time = `${hour}:${minute}${period.toLowerCase()}`;
-            const text = `${time} ${weekday} ${month} ${day}, ${year}`;
-            return { text, iso: date.toISOString() };
-          };
-
-          const renderDate = (value, className = 'commit-date') => {
-            const { text, iso } = formatDate(value);
-            if (iso) {
-              return `<time class="${htmlEscape(className)}" datetime="${htmlEscape(iso)}" data-local-datetime="${htmlEscape(iso)}">${htmlEscape(text)}</time>`;
-            }
-            if (text) {
-              return `<span class="${htmlEscape(className)}">${htmlEscape(text)}</span>`;
-            }
-            return '';
-          };
-
-          const prByBranch = new Map();
-          const prBySafe = new Map();
-
-          for (const pr of prList) {
-            if (pr && typeof pr === 'object') {
-              if (pr.branch) {
-                prByBranch.set(pr.branch, pr);
-              }
-              if (pr.safeName) {
-                prBySafe.set(pr.safeName, pr);
-              }
-            }
-          }
-
-          const branchPr = (entry) => {
-            const value = entry.value ?? {};
-            return prByBranch.get(value.branch) ?? prBySafe.get(value.safeName) ?? null;
-          };
-
-          const branchCommitsFor = (entry) => {
-            const value = entry.value ?? {};
-            const branchName = value.branch ?? '';
-            const safeName = value.safeName ?? '';
-            const commits = branchCommits?.[branchName] ?? branchCommits?.[safeName] ?? [];
-            return Array.isArray(commits) ? commits : [];
-          };
-
-          const baseData = (entry) => {
-            const value = entry.value ?? {};
-
-            return {
-              branch: value.branch ?? '',
-              safe: value.safeName ?? '',
-              deployed: value.deployedAt ?? 'unknown',
-              actor: value.actor ?? 'unknown',
-              commit: value.commit ?? '',
-              url: value.commitUrl ?? '#'
-            };
-          };
-
-          const uniqueCommits = (commits) => {
-            const seen = new Set();
-            const results = [];
-
-            for (const commit of Array.isArray(commits) ? commits : []) {
-              const sha = commit?.sha ?? commit?.shortSha ?? commit?.htmlUrl ?? commit?.message ?? null;
-              const key = sha ? String(sha) : null;
-              if (key && seen.has(key)) {
-                continue;
-              }
-              if (key) {
-                seen.add(key);
-              }
-              results.push(commit);
-            }
-
-            return results;
-          };
-
-          const normalizeSha = (value) => String(value ?? '').trim().toLowerCase();
-
-          const commitMatchesSha = (commit, target) => {
-            const normalizedTarget = normalizeSha(target);
-            if (!normalizedTarget) {
-              return false;
-            }
-
-            const candidates = [
-              normalizeSha(commit?.sha),
-              normalizeSha(commit?.shortSha)
-            ].filter(Boolean);
-
-            return candidates.some((candidate) => normalizedTarget.startsWith(candidate) || candidate.startsWith(normalizedTarget));
-          };
-
-          const excludeCommitBySha = (commits, target) => (Array.isArray(commits) ? commits : []).filter((commit) => !commitMatchesSha(commit, target));
-
-          const joinSegments = (segments) => segments.filter(Boolean).join('<span class="commit-separator">Â·</span>');
-
-          const commitItem = (commit) => {
-            const shortSha = commit?.shortSha ?? (commit?.sha ? String(commit.sha).slice(0, 7) : '');
-            const commitUrl = commit?.htmlUrl ?? '#';
-            const dateMarkup = renderDate(commit?.date ?? '');
-            const message = firstLine(commit?.message ?? '');
-
-            const segments = [];
-
-            if (dateMarkup) {
-              segments.push(dateMarkup);
-            }
-
-            if (message) {
-              segments.push(`<span class="commit-message">${htmlEscape(message)}</span>`);
-            }
-
-            if (shortSha) {
-              segments.push(`<a class="commit-sha" href="${htmlEscape(commitUrl)}">${htmlEscape(shortSha)}</a>`);
-            }
-
-            return `<li class="commit-item">${joinSegments(segments)}</li>`;
-          };
-
-          const renderMain = (entry) => {
-            const data = baseData(entry);
-            const githubUrl = githubBranchUrl('main');
-            const previewHref = './';
-            const actionLinks = [];
-            if (previewHref) {
-              actionLinks.push(`<a class="card-link" href="${htmlEscape(previewHref)}">Preview</a>`);
-            }
-            if (githubUrl) {
-              actionLinks.push(`<a class="card-link" href="${htmlEscape(githubUrl)}">GitHub</a>`);
-            }
-            let html = `<li class="card main">`;
-            html += `<div class="card-header">`;
-            html += `<div class="branch-title"><span class="branch-name">main</span><span class="badge">production</span></div>`;
-            if (actionLinks.length > 0) {
-              html += `<div class="card-links">${actionLinks.join('')}</div>`;
-            }
-            html += `</div>`;
-
-            const commitLinkText = data.commit ? htmlEscape(String(data.commit).slice(0, 7)) : '';
-            const deployedDisplay = renderDate(data.deployed) || (data.deployed ? htmlEscape(data.deployed) : '');
-            html += `<div class="meta">Last deployed ${deployedDisplay || htmlEscape('unknown')} by ${htmlEscape(data.actor)} Â· <a href="${htmlEscape(data.url)}">${commitLinkText}</a></div>`;
-
-            const commits = excludeCommitBySha(uniqueCommits(mainData.commits), data.commit).slice(0, 3);
-            if (commits.length > 0) {
-              html += `<div class="commit-section"><div class="commit-title">Recent commits</div><ul class="commit-list">`;
-              html += commits.map((commit) => commitItem(commit)).join('');
-              html += `</ul></div>`;
-            }
-
-            html += `</li>\n`;
-            return html;
-          };
-
-          const renderBranch = (entry) => {
-            const data = baseData(entry);
-            const pr = branchPr(entry);
-            const branchName = firstLine(data.branch ?? '') || 'unknown branch';
-            const previewHref = data.safe ? `./${data.safe}/` : './';
-            const githubUrl = githubBranchUrl(data.branch);
-            const actionLinks = [];
-            if (previewHref) {
-              actionLinks.push(`<a class="card-link" href="${htmlEscape(previewHref)}">Preview</a>`);
-            }
-            if (githubUrl) {
-              actionLinks.push(`<a class="card-link" href="${htmlEscape(githubUrl)}">GitHub</a>`);
-            }
-            let html = `<li class="card">`;
-            html += `<div class="card-header">`;
-            html += `<div class="branch-title"><span class="branch-name">${htmlEscape(branchName)}</span></div>`;
-            if (actionLinks.length > 0) {
-              html += `<div class="card-links">${actionLinks.join('')}</div>`;
-            }
-
-            html += `</div>`;
-
-            if (pr) {
-              const prNumber = pr.number != null ? String(pr.number) : '';
-              const prTitle = firstLine(pr.title ?? '');
-              const prLabel = prNumber ? `PR #${prNumber}${prTitle ? ` â ${prTitle}` : ''}` : prTitle;
-              html += `<div class="pr-meta"><a class="pr-link" href="${htmlEscape(pr.url ?? '#')}">${htmlEscape(prLabel)}</a></div>`;
-            }
-
-            const commitLinkText = data.commit ? htmlEscape(String(data.commit).slice(0, 7)) : '';
-            const deployedDisplay = renderDate(data.deployed) || (data.deployed ? htmlEscape(data.deployed) : '');
-            html += `<div class="meta">Last deployed ${deployedDisplay || htmlEscape('unknown')} by ${htmlEscape(data.actor)} Â· <a href="${htmlEscape(data.url)}">${commitLinkText}</a></div>`;
-
-            const commits = excludeCommitBySha(uniqueCommits(branchCommitsFor(entry)), data.commit).slice(0, 3);
-            if (commits.length > 0) {
-              html += `<div class="commit-section"><div class="commit-title">Recent commits</div><ul class="commit-list">`;
-              html += commits.map((commit) => commitItem(commit)).join('');
-              html += `</ul></div>`;
-            }
-
-            html += `</li>\n`;
-            return html;
-          };
-
-          const toTimestamp = (value) => {
-            if (!value) {
-              return 0;
-            }
-
-            const parsed = Date.parse(value);
-            return Number.isNaN(parsed) ? 0 : parsed;
-          };
-
-          const entries = Object.entries(deployments ?? {}).map(([key, value]) => ({ key, value }));
-          let output = '';
-
-          const mainEntry = entries.find((entry) => entry.key === 'main' && entry.value);
-          if (mainEntry) {
-            output += renderMain(mainEntry);
-          }
-
-          const branchEntries = entries
-            .filter((entry) => entry.key !== 'main')
-            .filter((entry) => branchPr(entry));
-
-          branchEntries.sort((a, b) => toTimestamp(b.value?.deployedAt) - toTimestamp(a.value?.deployedAt));
-
-          for (const entry of branchEntries) {
-            output += renderBranch(entry);
-          }
-
-          fs.appendFileSync('branch.html', output);
-          NODE
-
-          cat >> branch.html <<'HTML'
-            </ul>
-            <script>
-              (() => {
-                const baseOptions = {
-                  weekday: 'short',
-                  year: 'numeric',
-                  month: 'short',
-                  day: '2-digit',
-                  hour: 'numeric',
-                  minute: '2-digit',
-                  hour12: true
-                };
-
-                let zoneFormatter = null;
-                try {
-                  zoneFormatter = new Intl.DateTimeFormat(undefined, { ...baseOptions, timeZoneName: 'short' });
-                } catch (error) {
-                  zoneFormatter = null;
-                }
-
-                const fallbackFormatter = new Intl.DateTimeFormat(undefined, baseOptions);
-
-                const formatParts = (formatter, date) => {
-                  if (!formatter) {
-                    return null;
-                  }
-
-                  try {
-                    const parts = formatter.formatToParts(date);
-                    const find = (type) => {
-                      const entry = parts.find((part) => part.type === type);
-                      return entry ? entry.value : '';
-                    };
-
-                    const month = find('month');
-                    const rawDay = find('day');
-                    const day = rawDay ? rawDay.padStart(2, '0') : '';
-                    const year = find('year');
-                    const hour = find('hour');
-                    const minute = find('minute');
-                    const period = find('dayPeriod');
-                    const weekday = find('weekday');
-                    if (!month || !day || !year || !hour || !minute || !period || !weekday) {
-                      return null;
-                    }
-
-                    const time = `${hour}:${minute}${period.toLowerCase()}`;
-                    const base = `${time} ${weekday} ${month} ${day}, ${year}`;
-                    return base;
-                  } catch (error) {
-                    return null;
-                  }
-                };
-
-                const elements = document.querySelectorAll('[data-local-datetime]');
-                for (const element of elements) {
-                  const iso = element.getAttribute('data-local-datetime');
-                  if (!iso) {
-                    continue;
-                  }
-
-                  const date = new Date(iso);
-                  if (Number.isNaN(date.getTime())) {
-                    continue;
-                  }
-
-                  const display = formatParts(zoneFormatter, date) ?? formatParts(fallbackFormatter, date);
-                  if (display) {
-                    element.textContent = display;
-                  }
-                }
-              })();
-            </script>
-          </body>
-          </html>
-          HTML
+          BRANCH_HTML_PATH="$BRANCH_HTML_PATH" \
+          node ../scripts/render-branch-page.mjs
 
           git add -A
           if [ -n "$(git status --short)" ]; then
diff --git a/scripts/build-pages-site.mjs b/scripts/build-pages-site.mjs
new file mode 100644
index 0000000..182c429
--- /dev/null
+++ b/scripts/build-pages-site.mjs
@@ -0,0 +1,245 @@
+#!/usr/bin/env node
+import fs from 'node:fs/promises';
+import path from 'node:path';
+
+const DEFAULT_ENDPOINT = 'https://api.github.com/markdown';
+
+const getAuthToken = () => {
+  const candidates = [
+    process.env.GITHUB_TOKEN,
+    process.env.GITHUB_AUTH_TOKEN,
+    process.env.GH_TOKEN,
+    process.env.GITHUB_PAT,
+  ];
+  for (const candidate of candidates) {
+    if (candidate && candidate.trim()) {
+      return candidate.trim();
+    }
+  }
+  return null;
+};
+
+export const renderMarkdownWithGitHub = async (
+  markdown,
+  { mode = 'gfm', context, endpoint = DEFAULT_ENDPOINT } = {}
+) => {
+  const body = { text: String(markdown ?? '') };
+  if (mode) {
+    body.mode = mode;
+  }
+  if (context) {
+    body.context = context;
+  }
+
+  const headers = new Headers({
+    'Content-Type': 'application/json',
+    Accept: 'application/vnd.github+json',
+    'User-Agent': 'capy-pages-build-script',
+  });
+
+  const token = getAuthToken();
+  if (token) {
+    headers.set('Authorization', `Bearer ${token}`);
+  }
+
+  const response = await fetch(endpoint, {
+    method: 'POST',
+    headers,
+    body: JSON.stringify(body),
+  });
+
+  if (!response.ok) {
+    const message = await response.text();
+    throw new Error(
+      `GitHub markdown rendering failed with ${response.status} ${response.statusText}: ${message}`
+    );
+  }
+
+  return response.text();
+};
+
+const indentHtml = (html) => {
+  const normalised = String(html ?? '').replace(/\r\n?/g, '\n');
+  if (!normalised) {
+    return '';
+  }
+
+  const hasTrailingNewline = normalised.endsWith('\n');
+  const slice = hasTrailingNewline ? normalised.slice(0, -1) : normalised;
+  const lines = slice.split('\n');
+  while (lines.length > 0 && lines[lines.length - 1] === '') {
+    lines.pop();
+  }
+  return lines.map((line) => `    ${line}`).join('\n');
+};
+
+const formatUtcTimestamp = (date = new Date()) => {
+  const iso = date.toISOString();
+  const datePart = iso.slice(0, 10);
+  const timePart = iso.slice(11, 16);
+  return `${datePart} ${timePart} UTC`;
+};
+
+export const generateReadmeHtml = (
+  renderedHtml,
+  { generatedAt = new Date() } = {}
+) => {
+  const stamped = formatUtcTimestamp(generatedAt);
+  const indentedHtml = indentHtml(renderedHtml);
+  const contentBlock = `        ${indentedHtml}`;
+  return `<!DOCTYPE html>
+        <html lang="en">
+        <head>
+          <meta charset="utf-8">
+          <meta name="viewport" content="width=device-width, initial-scale=1">
+          <title>Capy README</title>
+          <style>
+            :root {
+              color-scheme: light dark;
+            }
+            body {
+              font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", sans-serif;
+              margin: 0 auto;
+              padding: 32px 16px 48px;
+              max-width: 920px;
+              line-height: 1.6;
+              background: #f6f8fa;
+              color: #1f2328;
+            }
+            a {
+              color: #0969da;
+            }
+            .markdown-body {
+              background: #fff;
+              border-radius: 12px;
+              padding: 32px;
+              box-shadow: 0 16px 40px rgba(15, 23, 42, 0.08);
+              border: 1px solid #d0d7de;
+            }
+            .page-meta {
+              margin-top: 24px;
+              font-size: 0.85em;
+              color: #57606a;
+              text-align: center;
+            }
+            pre {
+              background: #0d1117;
+              color: #f0f6fc;
+              padding: 16px;
+              border-radius: 8px;
+              overflow-x: auto;
+            }
+            code {
+              font-family: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;
+            }
+            @media (max-width: 720px) {
+              .markdown-body {
+                padding: 24px 20px;
+              }
+            }
+          </style>
+        </head>
+        <body>
+          <main class="markdown-body">
+${contentBlock}
+
+          </main>
+          <footer class="page-meta">Generated from README.md Â· ${stamped}</footer>
+        </body>
+        </html>
+`;
+};
+
+const printUsage = () => {
+  console.error(
+    'Usage: build-pages-site.mjs --source <readme.md> --output <output.html> [--mode gfm] [--context owner/repo]'
+  );
+};
+
+const parseArgs = (argv) => {
+  const args = {};
+  for (let index = 0; index < argv.length; index += 1) {
+    const key = argv[index];
+    if (!key.startsWith('--')) {
+      continue;
+    }
+    const value = argv[index + 1];
+    switch (key) {
+      case '--source':
+      case '--input':
+      case '--readme':
+        args.source = value;
+        index += 1;
+        break;
+      case '--output':
+        args.output = value;
+        index += 1;
+        break;
+      case '--mode':
+        args.mode = value;
+        index += 1;
+        break;
+      case '--context':
+        args.context = value;
+        index += 1;
+        break;
+      default:
+        break;
+    }
+  }
+  return args;
+};
+
+const ensureAbsolutePath = (filePath) => {
+  if (!filePath) {
+    return filePath;
+  }
+  return path.isAbsolute(filePath) ? filePath : path.resolve(process.cwd(), filePath);
+};
+
+const main = async () => {
+  const argv = parseArgs(process.argv.slice(2));
+  if (!argv.source || !argv.output) {
+    printUsage();
+    process.exitCode = 1;
+    return;
+  }
+
+  const sourcePath = ensureAbsolutePath(argv.source);
+  const outputPath = ensureAbsolutePath(argv.output);
+
+  let markdown;
+  try {
+    markdown = await fs.readFile(sourcePath, 'utf8');
+  } catch (error) {
+    console.error(`Failed to read markdown source ${sourcePath}:`, error.message);
+    process.exitCode = 1;
+    return;
+  }
+
+  let rendered;
+  try {
+    rendered = await renderMarkdownWithGitHub(markdown, {
+      mode: argv.mode || 'gfm',
+      context: argv.context || process.env.GITHUB_REPOSITORY || undefined,
+    });
+  } catch (error) {
+    console.error(error.message);
+    process.exitCode = 1;
+    return;
+  }
+
+  const html = generateReadmeHtml(rendered);
+
+  try {
+    await fs.mkdir(path.dirname(outputPath), { recursive: true });
+    await fs.writeFile(outputPath, `${html}\n`, 'utf8');
+  } catch (error) {
+    console.error(`Failed to write README HTML to ${outputPath}:`, error.message);
+    process.exitCode = 1;
+  }
+};
+
+if (import.meta.url === `file://${path.resolve(process.argv[1])}`) {
+  main();
+}
diff --git a/scripts/generate_readme_html.py b/scripts/generate_readme_html.py
new file mode 100644
index 0000000..7803ca1
--- /dev/null
+++ b/scripts/generate_readme_html.py
@@ -0,0 +1,96 @@
+#!/usr/bin/env python3
+"""Generate README HTML wrapper for branch deployments."""
+
+from __future__ import annotations
+
+import datetime as _dt
+import pathlib
+import sys
+import textwrap
+
+
+def generate_readme_html(source: pathlib.Path, destination: pathlib.Path) -> None:
+    content = source.read_text(encoding="utf-8")
+    indented = "\n".join(f"    {line}" for line in content.splitlines())
+    generated = _dt.datetime.now(tz=_dt.timezone.utc).strftime("%Y-%m-%d %H:%M UTC")
+
+    template = textwrap.dedent(
+        f"""<!DOCTYPE html>
+        <html lang=\"en\">
+        <head>
+          <meta charset=\"utf-8\">
+          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
+          <title>Capy README</title>
+          <style>
+            :root {{
+              color-scheme: light dark;
+            }}
+            body {{
+              font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", sans-serif;
+              margin: 0 auto;
+              padding: 32px 16px 48px;
+              max-width: 920px;
+              line-height: 1.6;
+              background: #f6f8fa;
+              color: #1f2328;
+            }}
+            a {{
+              color: #0969da;
+            }}
+            .markdown-body {{
+              background: #fff;
+              border-radius: 12px;
+              padding: 32px;
+              box-shadow: 0 16px 40px rgba(15, 23, 42, 0.08);
+              border: 1px solid #d0d7de;
+            }}
+            .page-meta {{
+              margin-top: 24px;
+              font-size: 0.85em;
+              color: #57606a;
+              text-align: center;
+            }}
+            pre {{
+              background: #0d1117;
+              color: #f0f6fc;
+              padding: 16px;
+              border-radius: 8px;
+              overflow-x: auto;
+            }}
+            code {{
+              font-family: SFMono-Regular, Consolas, \"Liberation Mono\", Menlo, monospace;
+            }}
+            @media (max-width: 720px) {{
+              .markdown-body {{
+                padding: 24px 20px;
+              }}
+            }}
+          </style>
+        </head>
+        <body>
+          <main class=\"markdown-body\">
+        {indented}
+          </main>
+          <footer class=\"page-meta\">Generated from README.md Â· {generated}</footer>
+        </body>
+        </html>
+        """
+    )
+
+    destination.write_text(template, encoding="utf-8")
+
+
+def main(argv: list[str]) -> int:
+    if len(argv) != 2:
+        sys.stderr.write(
+            "Usage: generate_readme_html.py <temp_html_path> <output_path>\n"
+        )
+        return 1
+
+    temp_html, output = map(pathlib.Path, argv)
+    generate_readme_html(temp_html, output)
+    return 0
+
+
+if __name__ == "__main__":
+    sys.exit(main(sys.argv[1:]))
diff --git a/scripts/render-branch-page.mjs b/scripts/render-branch-page.mjs
new file mode 100644
index 0000000..da0f0d4
--- /dev/null
+++ b/scripts/render-branch-page.mjs
@@ -0,0 +1,667 @@
+#!/usr/bin/env node
+const headerLines = [
+  '          <!DOCTYPE html>',
+  '          <html lang="en">',
+  '          <head>',
+  '            <meta charset="utf-8">',
+  '            <meta name="viewport" content="width=device-width, initial-scale=1">',
+  '            <title>Capy Branch Deployments</title>',
+  '            <style>',
+  '              body {',
+  '                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", sans-serif;',
+  '                max-width: 960px;',
+  '                margin: 40px auto;',
+  '                padding: 0 20px 40px;',
+  '                line-height: 1.6;',
+  '                color: #24292e;',
+  '                background: #f6f8fa;',
+  '              }',
+  '              h1 {',
+  '                margin-bottom: 16px;',
+  '              }',
+  '              ul.deployments {',
+  '                list-style: none;',
+  '                padding: 0;',
+  '                margin: 0;',
+  '                display: grid;',
+  '                gap: 16px;',
+  '              }',
+  '              li.card {',
+  '                background: #fff;',
+  '                border: 1px solid #d0d7de;',
+  '                border-radius: 8px;',
+  '                padding: 16px;',
+  '                box-shadow: 0 1px 0 rgba(31,35,40,0.04);',
+  '              }',
+  '              li.card.main {',
+  '                border-color: #4c8eda;',
+  '                box-shadow: 0 4px 12px rgba(76,142,218,0.12);',
+  '              }',
+  '              .branch-title {',
+  '                display: flex;',
+  '                flex-wrap: wrap;',
+  '                align-items: baseline;',
+  '                gap: 8px;',
+  '                margin-bottom: 12px;',
+  '              }',
+  '              .branch-name {',
+  '                font-size: 1.1em;',
+  '                font-weight: 600;',
+  '                color: #1f2328;',
+  '              }',
+  '              .branch-name a {',
+  '                color: inherit;',
+  '                text-decoration: none;',
+  '              }',
+  '              .branch-name a:hover {',
+  '                text-decoration: underline;',
+  '              }',
+  '              .commit-list {',
+  '                list-style: none;',
+  '                margin: 0;',
+  '                padding: 0;',
+  '                display: grid;',
+  '                gap: 10px;',
+  '              }',
+  '              .commit-item {',
+  '                font-size: 0.95em;',
+  '                color: #1f2328;',
+  '                display: flex;',
+  '                flex-wrap: wrap;',
+  '                align-items: baseline;',
+  '                gap: 10px;',
+  '              }',
+  '              .commit-item > * {',
+  '                flex-shrink: 0;',
+  '              }',
+  '              .commit-time {',
+  '                color: #57606a;',
+  '                font-weight: 600;',
+  '                font-variant-numeric: tabular-nums;',
+  '              }',
+  '              .commit-time time {',
+  '                color: inherit;',
+  '              }',
+  '              .commit-pr,',
+  '              .commit-branch,',
+  '              .commit-sha {',
+  "                font-family: ui-monospace, SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace;",
+  '                font-size: 0.9em;',
+  '                font-weight: 600;',
+  '                text-decoration: none;',
+  '              }',
+  '              .commit-pr {',
+  '                color: #8250df;',
+  '              }',
+  '              .commit-pr:hover {',
+  '                text-decoration: underline;',
+  '              }',
+  '              .commit-branch {',
+  '                color: #1f2328;',
+  '              }',
+  '              .commit-branch:hover {',
+  '                text-decoration: underline;',
+  '              }',
+  '              .commit-sha {',
+  '                color: #0969da;',
+  '              }',
+  '              .commit-sha:hover {',
+  '                text-decoration: underline;',
+  '              }',
+  '              .commit-message {',
+  '                font-weight: 500;',
+  '                color: #1f2328;',
+  '                flex: 1 1 220px;',
+  '                min-width: 200px;',
+  '              }',
+  '            </style>',
+  '          </head>',
+  '          <body>',
+  '            <h1>Capy Branch Deployments</h1>',
+  '            <ul class="deployments">',
+];
+const footerLines = [
+  '            </ul>',
+  '            <script>',
+  '              (() => {',
+  '                const baseOptions = {',
+  "                  weekday: 'short',",
+  "                  year: 'numeric',",
+  "                  month: 'short',",
+  "                  day: '2-digit',",
+  "                  hour: 'numeric',",
+  "                  minute: '2-digit',",
+  '                  hour12: true',
+  '                };',
+  '',
+  '                let zoneFormatter = null;',
+  '                try {',
+  "                  zoneFormatter = new Intl.DateTimeFormat(undefined, { ...baseOptions, timeZoneName: 'short' });",
+  '                } catch (error) {',
+  '                  zoneFormatter = null;',
+  '                }',
+  '',
+  '                const fallbackFormatter = new Intl.DateTimeFormat(undefined, baseOptions);',
+  '',
+  '                const formatParts = (formatter, date) => {',
+  '                  if (!formatter) {',
+  '                    return null;',
+  '                  }',
+  '',
+  '                  try {',
+  '                    const parts = formatter.formatToParts(date);',
+  '                    const find = (type) => {',
+  '                      const entry = parts.find((part) => part.type === type);',
+  "                      return entry ? entry.value : '';",
+  '                    };',
+  '',
+  "                    const month = find('month');",
+  "                    const rawDay = find('day');",
+  "                    const day = rawDay ? rawDay.padStart(2, '0') : '';",
+  "                    const year = find('year');",
+  "                    const hour = find('hour');",
+  "                    const minute = find('minute');",
+  "                    const period = find('dayPeriod');",
+  "                    const weekday = find('weekday');",
+  "                    const zone = find('timeZoneName');",
+  '',
+  '                    if (!month || !day || !year || !hour || !minute || !period || !weekday) {',
+  '                      return null;',
+  '                    }',
+  '',
+  '                    const time = `${hour}:${minute}${period.toLowerCase()}`;',
+  '                    const base = `${time} ${weekday} ${month} ${day}, ${year}`;',
+  "                    const zoneSuffix = zone ? ` ${zone}` : '';",
+  '                    return `${base}${zoneSuffix}`;',
+  '                  } catch (error) {',
+  '                    return null;',
+  '                  }',
+  '                };',
+  '',
+  "                const elements = document.querySelectorAll('[data-local-datetime]');",
+  '                for (const element of elements) {',
+  "                  const iso = element.getAttribute('data-local-datetime');",
+  '                  if (!iso) {',
+  '                    continue;',
+  '                  }',
+  '',
+  '                  const date = new Date(iso);',
+  '                  if (Number.isNaN(date.getTime())) {',
+  '                    continue;',
+  '                  }',
+  '',
+  '                  const display = formatParts(zoneFormatter, date) ?? formatParts(fallbackFormatter, date);',
+  '                  if (display) {',
+  '                    element.textContent = display;',
+  '                  }',
+  '                }',
+  '              })();',
+  '            </script>',
+  '          </body>',
+  '          </html>',
+];
+import fs from 'node:fs';
+
+const readJson = (path, fallback) => {
+  try {
+    return JSON.parse(fs.readFileSync(path, 'utf8'));
+  } catch (error) {
+    return fallback;
+  }
+};
+
+const toKey = (value) => {
+  const text = String(value ?? '').trim();
+  return text;
+};
+
+const deriveDeploymentKey = (entry) => {
+  if (!entry || typeof entry !== 'object') {
+    return '';
+  }
+
+  const candidates = [entry.key, entry.safeName, entry.branch];
+  for (const candidate of candidates) {
+    const key = toKey(candidate);
+    if (key) {
+      return key;
+    }
+  }
+
+  return '';
+};
+
+const normaliseDeployments = (value) => {
+  if (!value) {
+    return {};
+  }
+
+  const result = {};
+  const addEntry = (key, entry) => {
+    const trimmed = toKey(key);
+    if (!trimmed || !entry || typeof entry !== 'object') {
+      return;
+    }
+    result[trimmed] = {
+      ...entry,
+      key: entry.key ?? trimmed,
+    };
+  };
+
+  if (Array.isArray(value)) {
+    for (const entry of value) {
+      const key = deriveDeploymentKey(entry);
+      addEntry(key, entry);
+    }
+    return result;
+  }
+
+  if (typeof value === 'object') {
+    for (const [key, entry] of Object.entries(value)) {
+      addEntry(key, entry);
+    }
+    return result;
+  }
+
+  return {};
+};
+
+const deploymentsRaw = readJson(process.env.DEPLOY_DATA_PATH, {});
+const deployments = normaliseDeployments(deploymentsRaw);
+const prList = readJson(process.env.PR_DATA_PATH, []);
+const mainData = readJson(process.env.MAIN_DATA_PATH, { commits: [] });
+const branchCommits = readJson(process.env.BRANCH_COMMITS_PATH, {});
+const repoSlug = process.env.GITHUB_REPOSITORY ?? '';
+const githubBaseUrl = repoSlug ? `https://github.com/${repoSlug}` : '';
+const githubBranchUrl = (branch) => {
+  if (!githubBaseUrl) {
+    return '';
+  }
+
+  const name = String(branch ?? '').trim();
+  if (!name) {
+    return '';
+  }
+
+  return `${githubBaseUrl}/tree/${encodeURIComponent(name)}`;
+};
+
+const htmlEscape = (value) => String(value ?? '')
+  .replace(/&/g, '&amp;')
+  .replace(/</g, '&lt;')
+  .replace(/>/g, '&gt;')
+  .replace(/"/g, '&quot;')
+  .replace(/'/g, '&#39;');
+
+const firstLine = (text) => {
+  const str = String(text ?? '');
+  const newlineIndex = str.indexOf('\n');
+  return newlineIndex === -1 ? str : str.slice(0, newlineIndex);
+};
+
+const formatDate = (value) => {
+  if (!value) {
+    return { text: '', iso: '' };
+  }
+
+  const date = new Date(value);
+  if (Number.isNaN(date.getTime())) {
+    return { text: '', iso: '' };
+  }
+
+  const parts = new Intl.DateTimeFormat('en-US', {
+    weekday: 'short',
+    year: 'numeric',
+    month: 'short',
+    day: '2-digit',
+    hour: 'numeric',
+    minute: '2-digit',
+    hour12: true
+  }).formatToParts(date);
+
+  const get = (type) => {
+    const part = parts.find((entry) => entry.type === type);
+    return part ? part.value : '';
+  };
+
+  const month = get('month');
+  const rawDay = get('day');
+  const day = rawDay ? rawDay.padStart(2, '0') : '';
+  const year = get('year');
+  const hour = get('hour');
+  const minute = get('minute');
+  const period = get('dayPeriod');
+  const weekday = get('weekday');
+
+  if (!month || !day || !year || !hour || !minute || !period || !weekday) {
+    return { text: '', iso: '' };
+  }
+
+  const time = `${hour}:${minute}${period.toLowerCase()}`;
+  const text = `${time} ${weekday} ${month} ${day}, ${year}`;
+  return { text, iso: date.toISOString() };
+};
+
+const renderDate = (value, className = 'commit-time') => {
+  const { text, iso } = formatDate(value);
+  if (iso) {
+    return `<time class="${htmlEscape(className)}" datetime="${htmlEscape(iso)}" data-local-datetime="${htmlEscape(iso)}">${htmlEscape(text)}</time>`;
+  }
+  if (text) {
+    return `<span class="${htmlEscape(className)}">${htmlEscape(text)}</span>`;
+  }
+  return '';
+};
+
+const prByBranch = new Map();
+const prBySafe = new Map();
+
+for (const pr of prList) {
+  if (pr && typeof pr === 'object') {
+    if (pr.branch) {
+      prByBranch.set(pr.branch, pr);
+    }
+    if (pr.safeName) {
+      prBySafe.set(pr.safeName, pr);
+    }
+  }
+}
+
+const branchPr = (entry) => {
+  const value = entry.value ?? {};
+  return prByBranch.get(value.branch) ?? prBySafe.get(value.safeName) ?? null;
+};
+
+const branchCommitsFor = (entry) => {
+  const value = entry.value ?? {};
+  const branchName = value.branch ?? '';
+  const safeName = value.safeName ?? '';
+  const commits = branchCommits?.[branchName] ?? branchCommits?.[safeName] ?? [];
+  return Array.isArray(commits) ? commits : [];
+};
+
+const baseData = (entry) => {
+  const value = entry.value ?? {};
+
+  return {
+    branch: value.branch ?? '',
+    safe: value.safeName ?? '',
+    deployed: value.deployedAt ?? 'unknown',
+    actor: value.actor ?? 'unknown',
+    commit: value.commit ?? '',
+    message: value.message ?? '',
+    url: value.commitUrl ?? '#'
+  };
+};
+
+const uniqueCommits = (commits) => {
+  const seen = new Set();
+  const results = [];
+
+  for (const commit of Array.isArray(commits) ? commits : []) {
+    const sha = commit?.sha ?? commit?.shortSha ?? commit?.htmlUrl ?? commit?.message ?? null;
+    const key = sha ? String(sha) : null;
+    if (key && seen.has(key)) {
+      continue;
+    }
+    if (key) {
+      seen.add(key);
+    }
+    results.push(commit);
+  }
+
+  return results;
+};
+
+const normalizeSha = (value) => String(value ?? '').trim().toLowerCase();
+
+const commitMatchesSha = (commit, target) => {
+  const normalizedTarget = normalizeSha(target);
+  if (!normalizedTarget) {
+    return false;
+  }
+
+  const candidates = [
+    normalizeSha(commit?.sha),
+    normalizeSha(commit?.shortSha)
+  ].filter(Boolean);
+
+  return candidates.some((candidate) => normalizedTarget.startsWith(candidate) || candidate.startsWith(normalizedTarget));
+};
+
+const excludeCommitBySha = (commits, target) => (Array.isArray(commits) ? commits : []).filter((commit) => !commitMatchesSha(commit, target));
+
+const firstPullRequest = (commit) => {
+  const list = Array.isArray(commit?.prs) ? commit.prs : [];
+  for (const pr of list) {
+    if (pr && typeof pr === 'object') {
+      return pr;
+    }
+  }
+  return null;
+};
+
+const commitItem = (commit, { fallbackPr = null, fallbackBranch = '', fallbackMessage = '', fallbackSha = '', fallbackUrl = '' } = {}) => {
+  if (!commit || typeof commit !== 'object') {
+    commit = {};
+  }
+
+  const message = firstLine(commit.message ?? fallbackMessage ?? '');
+  const resolvedSha = commit.sha ?? fallbackSha ?? '';
+  const shortSha = commit.shortSha ?? (resolvedSha ? String(resolvedSha).slice(0, 7) : '');
+  const commitUrl = commit.htmlUrl ?? fallbackUrl ?? '';
+  const dateMarkup = renderDate(commit.date ?? '');
+  const pr = firstPullRequest(commit) ?? fallbackPr;
+  const prNumber = pr?.number != null ? String(pr.number) : '';
+  const prUrl = pr?.url ?? '';
+
+  const branchName = (() => {
+    const fromPr = pr?.branch ? String(pr.branch).trim() : '';
+    if (fromPr) {
+      return fromPr;
+    }
+    if (fallbackBranch) {
+      return String(fallbackBranch).trim();
+    }
+    return '';
+  })();
+  const branchUrl = branchName ? githubBranchUrl(branchName) : '';
+
+  const segments = [];
+
+  if (dateMarkup) {
+    segments.push(dateMarkup);
+  }
+
+  if (prNumber) {
+    const label = `#${htmlEscape(prNumber)}`;
+    if (prUrl) {
+      segments.push(`<a class="commit-pr" href="${htmlEscape(prUrl)}">${label}</a>`);
+    } else {
+      segments.push(`<span class="commit-pr">${label}</span>`);
+    }
+  }
+
+  if (branchName) {
+    const branchLabel = htmlEscape(branchName);
+    if (branchUrl) {
+      segments.push(`<a class="commit-branch" href="${htmlEscape(branchUrl)}">${branchLabel}</a>`);
+    } else {
+      segments.push(`<span class="commit-branch">${branchLabel}</span>`);
+    }
+  }
+
+  if (shortSha) {
+    if (commitUrl) {
+      segments.push(`<a class="commit-sha" href="${htmlEscape(commitUrl)}">${htmlEscape(shortSha)}</a>`);
+    } else {
+      segments.push(`<span class="commit-sha">${htmlEscape(shortSha)}</span>`);
+    }
+  }
+
+  if (message) {
+    segments.push(`<span class="commit-message">${htmlEscape(message)}</span>`);
+  }
+
+  if (segments.length === 0) {
+    return '';
+  }
+
+  return `<li class="commit-item">${segments.join(' ')}</li>`;
+};
+
+const renderMain = (entry) => {
+  const data = baseData(entry);
+  const commits = uniqueCommits(mainData.commits);
+  const items = [];
+
+  const findMatchingCommit = () => {
+    const targetSha = data.commit ? String(data.commit) : '';
+    if (!targetSha) {
+      return null;
+    }
+
+    const targetShort = targetSha.slice(0, 7);
+    for (const commit of commits) {
+      const sha = commit?.sha ? String(commit.sha) : '';
+      const shortSha = commit?.shortSha ? String(commit.shortSha) : sha.slice(0, 7);
+      if (sha && sha === targetSha) {
+        return commit;
+      }
+      if (shortSha && targetShort && shortSha === targetShort) {
+        return commit;
+      }
+    }
+    return null;
+  };
+
+  const matchingCommit = findMatchingCommit();
+  if (matchingCommit) {
+    const enriched = {
+      ...matchingCommit,
+      date: data.deployed || matchingCommit.date || '',
+      message: data.message || matchingCommit.message || '',
+      sha: matchingCommit.sha || data.commit || '',
+      shortSha: matchingCommit.shortSha || (data.commit ? String(data.commit).slice(0, 7) : ''),
+      htmlUrl: data.url || matchingCommit.htmlUrl || ''
+    };
+    items.push(commitItem(enriched));
+  } else {
+    const fallback = {
+      date: data.deployed || '',
+      message: data.message || '',
+      sha: data.commit || '',
+      shortSha: data.commit ? String(data.commit).slice(0, 7) : '',
+      htmlUrl: data.url || ''
+    };
+    const markup = commitItem(fallback);
+    if (markup) {
+      items.push(markup);
+    }
+  }
+
+  let remaining = commits;
+  if (matchingCommit) {
+    remaining = commits.filter((commit) => commit?.sha !== matchingCommit.sha);
+  }
+
+  for (const commit of remaining) {
+    if (items.length >= 3) {
+      break;
+    }
+    const markup = commitItem(commit);
+    if (markup) {
+      items.push(markup);
+    }
+  }
+
+  const previewHref = data.safe ? `./${data.safe}/` : './';
+  const branchLabel = previewHref ? `<a href="${htmlEscape(previewHref)}">main</a>` : 'main';
+
+  let html = `<li class="card main">`;
+  html += `<div class="branch-title"><span class="branch-name">${branchLabel}</span></div>`;
+  html += `<ul class="commit-list">${items.join('')}</ul>`;
+  html += `</li>\n`;
+  return html;
+};
+
+const renderBranch = (entry) => {
+  const data = baseData(entry);
+  const pr = branchPr(entry);
+  const branchName = firstLine(data.branch ?? '') || 'unknown branch';
+  const commits = uniqueCommits(branchCommitsFor(entry));
+  const items = [];
+
+  const fallbackPr = pr ? {
+    ...pr,
+    branch: pr.branch ?? data.branch ?? ''
+  } : null;
+
+  const previewHref = data.safe ? `./${data.safe}/` : './';
+  const displayName = htmlEscape(branchName);
+  const branchTitle = previewHref ? `<a href="${htmlEscape(previewHref)}">${displayName}</a>` : displayName;
+
+  const deploymentCommit = {
+    date: data.deployed || '',
+    message: data.message || '',
+    sha: data.commit || '',
+    shortSha: data.commit ? String(data.commit).slice(0, 7) : '',
+    htmlUrl: data.url || '',
+    prs: fallbackPr ? [fallbackPr] : []
+  };
+
+  const deploymentMarkup = commitItem(deploymentCommit, { fallbackPr, fallbackBranch: data.branch });
+  if (deploymentMarkup) {
+    items.push(deploymentMarkup);
+  }
+
+  for (const commit of commits) {
+    if (items.length >= 3) {
+      break;
+    }
+    const markup = commitItem(commit, { fallbackPr, fallbackBranch: data.branch });
+    if (markup) {
+      items.push(markup);
+    }
+  }
+
+  let html = `<li class="card">`;
+  html += `<div class="branch-title"><span class="branch-name">${branchTitle}</span></div>`;
+  html += `<ul class="commit-list">${items.join('')}</ul>`;
+  html += `</li>\n`;
+  return html;
+};
+
+const toTimestamp = (value) => {
+  if (!value) {
+    return 0;
+  }
+
+  const parsed = Date.parse(value);
+  return Number.isNaN(parsed) ? 0 : parsed;
+};
+
+const entries = Object.entries(deployments ?? {}).map(([key, value]) => ({ key, value }));
+let output = '';
+
+const mainEntry = entries.find((entry) => entry.key === 'main' && entry.value);
+if (mainEntry) {
+  output += renderMain(mainEntry);
+}
+
+const branchEntries = entries
+  .filter((entry) => entry.key !== 'main')
+  .filter((entry) => branchPr(entry));
+
+branchEntries.sort((a, b) => toTimestamp(b.value?.deployedAt) - toTimestamp(a.value?.deployedAt));
+
+for (const entry of branchEntries) {
+  output += renderBranch(entry);
+}
+
+const dynamicHtml = output;
+
+const header = `${headerLines.join('\n')}\n`;
+const footer = `${footerLines.join('\n')}\n`;
+const branchHtmlPath = process.env.BRANCH_HTML_PATH ?? 'branch.html';
+fs.writeFileSync(branchHtmlPath, `${header}${dynamicHtml}${footer}`, 'utf8');
diff --git a/scripts/update-deployments.mjs b/scripts/update-deployments.mjs
new file mode 100644
index 0000000..4d92d23
--- /dev/null
+++ b/scripts/update-deployments.mjs
@@ -0,0 +1,176 @@
+#!/usr/bin/env node
+import fs from 'node:fs';
+
+const parseJson = (text, fallback) => {
+  try {
+    return JSON.parse(text);
+  } catch (error) {
+    return fallback;
+  }
+};
+
+const readJsonFile = (path, fallback) => {
+  try {
+    const contents = fs.readFileSync(path, 'utf8');
+    return parseJson(contents, fallback);
+  } catch (error) {
+    return fallback;
+  }
+};
+
+const toString = (value) => String(value ?? '').trim();
+
+const deriveKey = (entry) => {
+  if (!entry || typeof entry !== 'object') {
+    return '';
+  }
+
+  const candidates = [entry.key, entry.safeName, entry.branch];
+  for (const candidate of candidates) {
+    const key = toString(candidate);
+    if (key) {
+      return key;
+    }
+  }
+
+  return '';
+};
+
+const normaliseDeployments = (value) => {
+  if (!value) {
+    return {};
+  }
+
+  if (Array.isArray(value)) {
+    const result = {};
+    for (const entry of value) {
+      const key = deriveKey(entry);
+      if (!key) {
+        continue;
+      }
+      if (entry && typeof entry === 'object') {
+        result[key] = { ...entry, key };
+      }
+    }
+    return result;
+  }
+
+  if (typeof value === 'object') {
+    const result = {};
+    for (const [key, entry] of Object.entries(value)) {
+      if (!key) {
+        continue;
+      }
+      if (!entry || typeof entry !== 'object') {
+        continue;
+      }
+      const derivedKey = deriveKey(entry) || key;
+      result[key] = { ...entry, key: derivedKey };
+    }
+    return result;
+  }
+
+  return {};
+};
+
+const deploymentsPath = process.env.DEPLOY_DATA_PATH || 'deployments.json';
+const deployments = normaliseDeployments(readJsonFile(deploymentsPath, {}));
+
+const targetKey = toString(process.env.DEPLOY_TARGET_KEY);
+const branchName = toString(process.env.DEPLOY_BRANCH);
+const safeName = toString(process.env.DEPLOY_SAFE_NAME);
+const commit = toString(process.env.DEPLOY_COMMIT);
+const message = toString(process.env.DEPLOY_MESSAGE);
+const actor = toString(process.env.DEPLOY_ACTOR);
+const timestamp = toString(process.env.DEPLOY_TIMESTAMP);
+const commitUrl = toString(process.env.DEPLOY_URL);
+
+const activeListRaw = process.env.DEPLOY_ACTIVE;
+const activeList = (() => {
+  if (!activeListRaw) {
+    return [];
+  }
+  const parsed = parseJson(activeListRaw, []);
+  return Array.isArray(parsed) ? parsed : [];
+})();
+
+const activeSet = new Set(['main']);
+for (const value of activeList) {
+  const key = toString(value);
+  if (key) {
+    activeSet.add(key);
+  }
+}
+if (targetKey) {
+  activeSet.add(targetKey);
+}
+if (safeName) {
+  activeSet.add(safeName);
+}
+
+if (targetKey) {
+  const previous = deployments[targetKey] && typeof deployments[targetKey] === 'object'
+    ? deployments[targetKey]
+    : {};
+  deployments[targetKey] = {
+    ...previous,
+    key: targetKey,
+    branch: branchName || previous.branch || safeName || targetKey,
+    safeName: safeName || previous.safeName || (targetKey === 'main' ? '' : targetKey),
+    commit: commit || previous.commit || '',
+    message: message || previous.message || '',
+    actor: actor || previous.actor || '',
+    deployedAt: timestamp || previous.deployedAt || '',
+    commitUrl: commitUrl || previous.commitUrl || '',
+  };
+}
+
+const shouldKeep = (key, entry) => {
+  if (!key) {
+    return false;
+  }
+  if (key === 'main') {
+    return true;
+  }
+  if (activeSet.has(key)) {
+    return true;
+  }
+  if (entry && typeof entry === 'object') {
+    const branch = toString(entry.branch);
+    const safe = toString(entry.safeName);
+    if (branch && activeSet.has(branch)) {
+      return true;
+    }
+    if (safe && activeSet.has(safe)) {
+      return true;
+    }
+  }
+  return false;
+};
+
+for (const key of Object.keys(deployments)) {
+  const entry = deployments[key];
+  if (!shouldKeep(key, entry)) {
+    delete deployments[key];
+  }
+}
+
+const orderedKeys = Object.keys(deployments).sort((a, b) => {
+  if (a === 'main') {
+    return -1;
+  }
+  if (b === 'main') {
+    return 1;
+  }
+  return a.localeCompare(b);
+});
+
+const output = {};
+for (const key of orderedKeys) {
+  const entry = deployments[key];
+  if (entry && typeof entry === 'object') {
+    output[key] = { ...entry, key };
+  }
+}
+
+fs.writeFileSync(deploymentsPath, `${JSON.stringify(output, null, 2)}\n`, 'utf8');
-- 
2.51.0

