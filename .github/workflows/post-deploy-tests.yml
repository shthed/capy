name: Post-deploy branch tests

on:
  workflow_run:
    workflows:
      - Deploy GitHub Pages previews
    types:
      - completed

permissions:
  contents: read
  actions: read
  pull-requests: write

jobs:
  review:
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push' &&
      github.event.workflow_run.head_branch != null &&
      github.event.workflow_run.head_branch != ''
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ format('post-deploy-tests-{0}', replace(github.event.workflow_run.head_branch, '/', '-')) }}
      cancel-in-progress: true
    steps:
      - name: Checkout branch commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Derive Pages preview URL
        id: preview
        env:
          BRANCH_NAME: ${{ github.event.workflow_run.head_branch }}
        run: |
          set -euo pipefail

          SAFE_NAME=$(printf '%s' "${BRANCH_NAME}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          BASE_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"

          if [ "${BRANCH_NAME}" = "main" ]; then
            PREVIEW_URL="${BASE_URL}/"
          else
            PREVIEW_URL="${BASE_URL}/${SAFE_NAME}/"
          fi

          echo "preview_url=${PREVIEW_URL}" >> "$GITHUB_OUTPUT"
          echo "Preview URL: ${PREVIEW_URL}"

      - name: Prepare UI review artifacts directory
        run: |
          set -euo pipefail
          rm -rf artifacts/ui-review
          mkdir -p artifacts/ui-review
      - name: Run Playwright smoke tests
        env:
          PREVIEW_URL: ${{ steps.preview.outputs.preview_url }}
          PLAYWRIGHT_BASE_URL: ${{ steps.preview.outputs.preview_url }}
        run: npm test --silent

      - name: Detect UI review artifacts
        id: artifact-check
        if: always()
        run: |
          set -euo pipefail

          if [ -d "artifacts/ui-review" ] && find "artifacts/ui-review" -type f -print -quit | grep -q .; then
            echo "found=true" >> "$GITHUB_OUTPUT"
          else
            echo "found=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload UI review artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ui-review-${{ github.event.workflow_run.head_branch }}-${{ github.run_id }}
          path: artifacts/ui-review
          if-no-files-found: ignore

      - name: Share preview and screenshots on PR
        if: always()
        uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.preview.outputs.preview_url }}
          ARTIFACTS_FOUND: ${{ steps.artifact-check.outputs.found || 'false' }}
          JOB_STATUS: ${{ job.status }}
        with:
          script: |
            const pullRequests = context.payload.workflow_run?.pull_requests ?? [];
            if (!Array.isArray(pullRequests) || pullRequests.length === 0) {
              core.info('No pull requests attached to this run. Skipping comment.');
              return;
            }

            const previewUrl = process.env.PREVIEW_URL;
            const artifactsFound = process.env.ARTIFACTS_FOUND === 'true';
            const jobStatus = process.env.JOB_STATUS || 'unknown';
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            const bodyLines = [
              `üöÄ Preview updated: ${previewUrl}`,
              `üß™ Post-deploy tests: ${jobStatus.toUpperCase()}`,
            ];

            if (artifactsFound) {
              bodyLines.push(`üñºÔ∏è UI review screenshots: ${runUrl}#artifacts`);
            } else {
              bodyLines.push('‚ÑπÔ∏è No UI review screenshots were generated for this run.');
            }

            const body = bodyLines.join('\n\n');

            for (const pr of pullRequests) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body,
              });
            }
