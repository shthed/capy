name: Deploy Branch to GitHub Pages

on:
  push:
    branches:
      - '**'  # Trigger on all branches
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          path: source

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
        continue-on-error: true

      - name: Initialize gh-pages branch if needed
        run: |
          if [ ! -d "gh-pages/.git" ]; then
            echo "Creating new gh-pages branch"
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            git remote add origin https://github.com/${{ github.repository }}.git
            echo "# GitHub Pages" > README.md
            echo "This branch contains deployed content from all branches." >> README.md
            git add README.md
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Initialize gh-pages branch"
          fi

      - name: Prepare branch name for folder
        id: branch-name
        run: |
          # Convert branch name to safe folder name
          BRANCH_NAME="${{ github.ref_name }}"
          SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "safe_name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME -> Folder: $SAFE_BRANCH_NAME"

      - name: Deploy branch content
        run: |
          cd gh-pages
          BRANCH_FOLDER="${{ steps.branch-name.outputs.safe_name }}"
          
          # Remove old content for this branch if it exists
          if [ -d "$BRANCH_FOLDER" ]; then
            echo "Removing old content for branch: $BRANCH_FOLDER"
            rm -rf "$BRANCH_FOLDER"
          fi
          
          # Create branch folder
          mkdir -p "$BRANCH_FOLDER"
          
          # Copy content from source (excluding .git, node_modules, etc)
          echo "Copying content to: $BRANCH_FOLDER"
          rsync -av --exclude='.git' \
                    --exclude='node_modules' \
                    --exclude='test-results' \
                    --exclude='playwright-report' \
                    --exclude='blob-report' \
                    --exclude='artifacts' \
                    ../source/ "$BRANCH_FOLDER/"
          
          # Generate index page listing all branches if main branch
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "Updating main branch index"
            cp "$BRANCH_FOLDER/index.html" index.html 2>/dev/null || true
          fi
          
          # Create a simple index.html at root if it doesn't exist
          if [ ! -f "index.html" ] && [ "${{ github.ref_name }}" != "main" ]; then
            cat > index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Capy - Branch Deployments</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      max-width: 800px;
      margin: 50px auto;
      padding: 20px;
      line-height: 1.6;
    }
    h1 { color: #333; }
    ul { list-style: none; padding: 0; }
    li { margin: 10px 0; }
    a {
      display: inline-block;
      padding: 10px 15px;
      background: #3b82f6;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      transition: background 0.2s;
    }
    a:hover { background: #2563eb; }
  </style>
</head>
<body>
  <h1>Capy Image Generator - Branch Deployments</h1>
  <p>Select a branch to view:</p>
  <ul id="branches"></ul>
  <script>
    // This will be populated by the deployment script
    const branches = [];
    const list = document.getElementById('branches');
    branches.forEach(branch => {
      const li = document.createElement('li');
      const a = document.createElement('a');
      a.href = branch + '/';
      a.textContent = branch;
      li.appendChild(a);
      list.appendChild(li);
    });
  </script>
</body>
</html>
EOF
          fi
          
          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy branch: ${{ github.ref_name }} (commit: ${{ github.sha }})"
            git push origin gh-pages --force
            echo "Deployed successfully to: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$BRANCH_FOLDER/"
          fi

  # Deploy to GitHub Pages from gh-pages branch
  deploy-pages:
    needs: deploy-branch
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
