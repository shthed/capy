name: Deploy GitHub Pages previews

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch to deploy (defaults to the ref that triggered the run)'
        required: false
        type: string

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    if: github.ref != 'refs/heads/gh-pages'
    runs-on: ubuntu-latest
    env:
      EFFECTIVE_BRANCH: "${{ github.event_name == 'workflow_dispatch' && inputs.target_branch != '' && inputs.target_branch || github.ref_name }}"
      EFFECTIVE_REF: "${{ github.event_name == 'workflow_dispatch' && inputs.target_branch != '' && format('refs/heads/{0}', inputs.target_branch) || github.ref }}"
    concurrency:
      group: pages-deployments
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.sync.outputs.preview_url || steps.deploy-pages.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ env.EFFECTIVE_REF }}
          fetch-depth: 0

      - name: Sync branch to gh-pages
        id: sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message || '' }}
          COMMIT_TIMESTAMP: ${{ github.event.head_commit.timestamp || '' }}
          TARGET_BRANCH: ${{ env.EFFECTIVE_BRANCH }}
        run: |
          set -euo pipefail

          BRANCH_NAME="${TARGET_BRANCH}"
          SAFE_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          TARGET_DIR="."

          if [ "$BRANCH_NAME" = "main" ]; then
            SAFE_NAME=""
          else
            TARGET_DIR="$SAFE_NAME"
          fi

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          rm -rf pages
          if git ls-remote --exit-code origin gh-pages >/dev/null 2>&1; then
            git clone --depth=1 --branch gh-pages "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" pages
          else
            mkdir pages
            git -C pages init
            git -C pages checkout -b gh-pages
            git -C pages remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            touch pages/.nojekyll
            git -C pages add .nojekyll
            git -C pages commit -m "Initialize gh-pages"
            git -C pages push origin gh-pages
          fi

          cd pages

          touch .nojekyll

          generate_readme_html() {
            local target_root="$1"
            local source_file="../README.md"

            if [ ! -f "$source_file" ]; then
              echo "README.md not found; skipping HTML conversion" >&2
              return 0
            fi

            local output_dir="$target_root/README"
            local output_file="$output_dir/index.html"
            rm -rf "$output_dir"
            mkdir -p "$output_dir"

            if ! node ../scripts/build-pages-site.mjs --source "$source_file" --output "$output_file" --mode gfm --context "${GITHUB_REPOSITORY}"; then
              echo "Warning: README markdown to HTML conversion failed" >&2
              return 0
            fi
          }

          RSYNC_ARGS=(
            "--exclude=.git/"
            "--exclude=.github/"
            "--exclude=.github"
            "--exclude=node_modules/"
            "--exclude=pages/"
            "--exclude=.gitignore"
            "--exclude=.gitattributes"
            "--exclude=.DS_Store"
          )

          if [ "$TARGET_DIR" = "." ]; then
            rsync -a "${RSYNC_ARGS[@]}" ../ ./
            generate_readme_html "."
          else
            rm -rf "$TARGET_DIR"
            mkdir -p "$TARGET_DIR"

            ESSENTIAL_FILES=(
              "index.html"
              "capy.json"
            )

            ROOT_JS_FILES=()
            while IFS= read -r -d '' js_path; do
              js_file="${js_path#../}"
              case "$js_file" in
                "" | "playwright.config.js")
                  continue
                  ;;
              esac
              ROOT_JS_FILES+=("$js_file")
            done < <(find .. -maxdepth 1 -mindepth 1 -type f -name '*.js' -print0)

            if [ "${#ROOT_JS_FILES[@]}" -gt 0 ]; then
              IFS=$'\n' ROOT_JS_FILES=($(printf '%s\n' "${ROOT_JS_FILES[@]}" | LC_ALL=C sort -u))
              IFS=$' \t\n'
              for js_file in "${ROOT_JS_FILES[@]}"; do
                ESSENTIAL_FILES+=("$js_file")
              done
            fi

            for file in "${ESSENTIAL_FILES[@]}"; do
              if [ -e "../$file" ]; then
                cp -a "../$file" "$TARGET_DIR/"
              else
                echo "Warning: required file $file not found during branch deployment sync" >&2
              fi
            done

            JS_SYNC_EXCLUDES=(
              "--exclude=node_modules/"
              "--exclude=pages/"
              "--exclude=preview/"
            )

            JS_INCLUDE_RULES=(
              "--include=*/"
              "--include=*.js"
              "--include=*.json"
              "--exclude=*"
            )

            rsync -a "${RSYNC_ARGS[@]}" "${JS_SYNC_EXCLUDES[@]}" "${JS_INCLUDE_RULES[@]}" ../ "$TARGET_DIR/"
            generate_readme_html "$TARGET_DIR"
          fi

          MESSAGE="$COMMIT_MESSAGE"
          if [ -z "$MESSAGE" ]; then
            MESSAGE=$(git -C .. log -1 --pretty=%B | head -n 1)
          fi

          TIMESTAMP="$COMMIT_TIMESTAMP"
          if [ -z "$TIMESTAMP" ]; then
            TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          fi

          git add -A
          if [ -n "$(git status --short)" ]; then
            git commit -m "Deploy ${BRANCH_NAME} (${GITHUB_SHA})"
            git push origin gh-pages
          else
            echo "No changes to commit"
          fi

          BASE_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}"
          if [ -z "$SAFE_NAME" ]; then
            PREVIEW_URL="${BASE_URL}/"
          else
            PREVIEW_URL="${BASE_URL}/${SAFE_NAME}/"
          fi

          echo "preview_url=${PREVIEW_URL}" >> "$GITHUB_OUTPUT"
          echo "Branch deployed to: ${PREVIEW_URL}"

          cd ..

      - name: Prepare Pages artifact
        run: |
          set -euo pipefail
          rm -rf site
          mkdir -p site
          rsync -a --exclude='.git/' pages/ site/

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deploy-pages
        uses: actions/deploy-pages@v4

      - name: Preview URL
        run: echo "Preview available at ${{ steps.sync.outputs.preview_url }}"
