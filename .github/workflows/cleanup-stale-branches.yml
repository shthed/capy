name: Cleanup Stale Branches

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (list branches without deleting)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
  schedule:
    # Run weekly on Sunday at 00:00 UTC
    - cron: '0 0 * * 0'

permissions:
  contents: write
  pull-requests: read

jobs:
  cleanup-stale-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches

      - name: Find and delete stale branches
        uses: actions/github-script@v7
        with:
          script: |
            const dryRun = '${{ github.event.inputs.dry_run }}' !== 'false';
            
            console.log(`Running in ${dryRun ? 'DRY RUN' : 'DELETE'} mode`);
            
            // Get all branches with pagination
            const branches = await github.paginate(github.rest.repos.listBranches, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Get all open PRs with pagination
            const openPRs = await github.paginate(github.rest.pulls.list, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            
            // Create a set of branches with open PRs
            const branchesWithPRs = new Set(openPRs.map(pr => pr.head.ref));
            
            // Protected branches that should never be deleted
            const protectedBranches = ['main', 'master', 'gh-pages'];
            
            // Find stale branches
            const staleBranches = branches.filter(branch => 
              !protectedBranches.includes(branch.name) &&
              !branchesWithPRs.has(branch.name)
            );
            
            console.log(`Total branches: ${branches.length}`);
            console.log(`Branches with open PRs: ${branchesWithPRs.size}`);
            console.log(`Stale branches to clean up: ${staleBranches.length}`);
            
            if (staleBranches.length === 0) {
              console.log('No stale branches to clean up!');
              return;
            }
            
            // List stale branches
            console.log('\nStale branches:');
            for (const branch of staleBranches) {
              console.log(`  - ${branch.name}`);
            }
            
            if (dryRun) {
              console.log('\n✓ DRY RUN: No branches were deleted.');
              console.log('To actually delete these branches, run the workflow with dry_run=false');
              return;
            }
            
            // Delete stale branches
            console.log('\nDeleting stale branches...');
            let deletedCount = 0;
            let errorCount = 0;
            
            for (const branch of staleBranches) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branch.name}`
                });
                console.log(`  ✓ Deleted: ${branch.name}`);
                deletedCount++;
              } catch (error) {
                console.log(`  ✗ Failed to delete: ${branch.name}`);
                console.log(`    Error: ${error.message}`);
                errorCount++;
              }
            }
            
            console.log(`\nSummary: Deleted ${deletedCount} branches, ${errorCount} errors`);
            
            if (errorCount > 0) {
              core.setFailed(`Failed to delete ${errorCount} branches`);
            }
