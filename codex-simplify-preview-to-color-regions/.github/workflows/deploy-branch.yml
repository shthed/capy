name: Deploy Branch to GitHub Pages

on:
  push:
    branches:
      - '**'  # Trigger on all branches
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy-branch:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Check if branch has an open PR
        id: check-pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.payload.ref.replace('refs/heads/', '')}`
            });

            const hasPR = pulls.length > 0;
            console.log(`Branch ${context.ref} has open PR: ${hasPR}`);
            return hasPR;

      - name: Skip deployment if no open PR (except main)
        if: steps.check-pr.outputs.result == 'false' && github.ref != 'refs/heads/main'
        run: |
          echo "Skipping deployment: Branch does not have an open PR"
          exit 0

      - name: Checkout current branch
        if: steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}
          path: source
          fetch-depth: 1

      - name: Configure git credentials for authenticated operations
        if: steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main'
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git config --global credential.helper store
          echo "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials

      - name: Restore gh-pages cache
        if: steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main'
        uses: actions/cache/restore@v4
        with:
          path: gh-pages
          key: gh-pages-${{ github.repository }}-${{ github.run_id }}
          restore-keys: |
            gh-pages-${{ github.repository }}-

      - name: Setup gh-pages branch
        if: steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main'
        run: |
          # Check if gh-pages branch exists remotely
          if [ -d "gh-pages/.git" ]; then
            echo "gh-pages cache exists, updating it"
            cd gh-pages
            git fetch origin gh-pages
            git reset --hard origin/gh-pages
          elif git ls-remote --exit-code --heads https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages >/dev/null 2>&1; then
            echo "gh-pages branch exists, cloning it"
            git clone --depth=1 --branch gh-pages --single-branch https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages
          else
            echo "gh-pages branch doesn't exist, initializing it"
            mkdir -p gh-pages
            cd gh-pages
            git init
            git checkout -b gh-pages
            git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
            echo "# GitHub Pages" > README.md
            echo "This branch contains deployed content from all branches." >> README.md
            git add README.md
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Initialize gh-pages branch"
            git push origin gh-pages
          fi

      - name: Prepare branch name for folder
        if: steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main'
        id: branch-name
        run: |
          # Convert branch name to safe folder name
          BRANCH_NAME="${{ github.ref_name }}"
          # Main branch deploys to root (empty folder name), others to subfolders
          if [ "$BRANCH_NAME" = "main" ]; then
            SAFE_BRANCH_NAME=""
          else
            SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g')
          fi
          echo "safe_name=$SAFE_BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH_NAME -> Folder: $SAFE_BRANCH_NAME"

      - name: Fetch open PRs with branches
        if: steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main'
        id: fetch-prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });

            const branches = pulls.map(pr => ({
              branch: pr.head.ref,
              safeName: pr.head.ref.replace(/[^a-zA-Z0-9._-]/g, '-'),
              title: pr.title,
              number: pr.number,
              updated: pr.updated_at,
              url: pr.html_url
            }));

            // Write to file for shell script to read
            const fs = require('fs');
            fs.writeFileSync('pr-branches.json', JSON.stringify(branches, null, 2));

            return branches;

      - name: Deploy branch content
        if: steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main'
        run: |
          cd gh-pages
          BRANCH_FOLDER="${{ steps.branch-name.outputs.safe_name }}"

          # Handle main branch differently (deploys to root)
          if [ -z "$BRANCH_FOLDER" ]; then
            echo "Deploying main branch to root"
            # For main branch, copy files directly to root (including index.html)
            # Preserve existing branch folders
            rsync -a --exclude='.git' \
                      --exclude='node_modules' \
                      --exclude='test-results' \
                      --exclude='playwright-report' \
                      --exclude='blob-report' \
                      --exclude='artifacts' \
                      --exclude='README.md' \
                      --exclude='branch.html' \
                      --delete-excluded \
                      ../source/ ./
          else
            # For other branches, deploy to subfolder
            # Remove old content for this branch if it exists
            if [ -d "$BRANCH_FOLDER" ]; then
              echo "Removing old content for branch: $BRANCH_FOLDER"
              rm -rf "$BRANCH_FOLDER"
            fi

            # Create branch folder
            mkdir -p "$BRANCH_FOLDER"

            # Copy content from source (excluding .git, node_modules, etc)
            echo "Copying content to: $BRANCH_FOLDER"
            rsync -a --exclude='.git' \
                      --exclude='node_modules' \
                      --exclude='test-results' \
                      --exclude='playwright-report' \
                      --exclude='blob-report' \
                      --exclude='artifacts' \
                      ../source/ "$BRANCH_FOLDER/"
          fi

          # Clean up old branches that no longer have open PRs
          echo "Cleaning up branches without open PRs..."
          if [ -f ../pr-branches.json ]; then
            # Get list of branches with open PRs
            ACTIVE_BRANCHES=$(cat ../pr-branches.json | grep -o '"safeName": "[^"]*"' | cut -d'"' -f4)

            # Check each folder and remove if not in active list
            for dir in */; do
              folder_name="${dir%/}"
              # Skip branch.html and README.md
              if [ "$folder_name" != "branch.html" ] && [ "$folder_name" != "README.md" ]; then
                if ! echo "$ACTIVE_BRANCHES" | grep -q "^${folder_name}$"; then
                  echo "Removing stale deployment: $folder_name"
                  rm -rf "$folder_name"
                fi
              fi
            done
          fi

          # Generate branch index page with main first, then sorted branches from open PRs
          cat > branch.html <<'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Capy Branch Deployments</title>
            <style>
              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                max-width: 900px;
                margin: 40px auto;
                padding: 0 20px;
                line-height: 1.6;
              }
              h1 {
                color: #333;
                border-bottom: 2px solid #e1e4e8;
                padding-bottom: 10px;
              }
              .info {
                background: #f6f8fa;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                padding: 15px;
                margin: 20px 0;
              }
              ul {
                list-style: none;
                padding: 0;
              }
              li {
                margin: 15px 0;
                padding: 15px;
                background: #fff;
                border: 1px solid #e1e4e8;
                border-radius: 6px;
                transition: box-shadow 0.2s;
              }
              li:hover {
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
              }
              li.main-branch {
                background: #e6f7ff;
                border-color: #91d5ff;
              }
              .branch-link {
                font-size: 1.1em;
                font-weight: 600;
                color: #0366d6;
                text-decoration: none;
              }
              .branch-link:hover {
                text-decoration: underline;
              }
              .pr-info {
                margin-top: 5px;
                font-size: 0.9em;
                color: #586069;
              }
              .pr-link {
                color: #0366d6;
                text-decoration: none;
              }
              .pr-link:hover {
                text-decoration: underline;
              }
              .timestamp {
                font-size: 0.85em;
                color: #6a737d;
                margin-top: 5px;
              }
              .badge {
                display: inline-block;
                padding: 2px 8px;
                font-size: 0.75em;
                font-weight: 600;
                border-radius: 12px;
                background: #28a745;
                color: white;
                margin-left: 8px;
              }
            </style>
          </head>
          <body>
            <h1>Capy Image Generator - Branch Deployments</h1>
            <div class="info">
              <strong>Note:</strong> The main branch is always deployed to the root.
              Other branches with open pull requests are deployed to subfolders.
              Branches are sorted by most recently updated first.
            </div>
            <ul>
          EOF

          # Add main branch first (always at root)
          cat >> branch.html <<'EOF'
              <li class="main-branch">
                <a class="branch-link" href="./">main<span class="badge">PRODUCTION</span></a>
                <div class="pr-info">The main production branch - always deployed to root</div>
              </li>
          EOF

          # Add branches from PR data (already sorted by updated date)
          if [ -f ../pr-branches.json ]; then
            cat ../pr-branches.json | jq -r '.[] |
              "<li>" +
              "<a class=\"branch-link\" href=\"" + .safeName + "/\">" + .branch + "</a>" +
              "<div class=\"pr-info\">PR #" + (.number|tostring) + ": " + .title + " - <a class=\"pr-link\" href=\"" + .url + "\">View PR</a></div>" +
              "<div class=\"timestamp\">Last updated: " + .updated + "</div>" +
              "</li>"
            ' >> branch.html
          fi

          cat >> branch.html <<'EOF'
            </ul>
          </body>
          </html>
          EOF

          # Commit and push
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A

          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_ENV
          else
            git commit -m "Deploy branch: ${{ github.ref_name }} (commit: ${{ github.sha }})"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} gh-pages --force
            echo "has_changes=true" >> $GITHUB_ENV
            if [ -z "$BRANCH_FOLDER" ]; then
              echo "Published main branch to root: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
            else
              echo "Published branch to: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/$BRANCH_FOLDER/"
            fi
            echo "Branch index available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/branch.html"
          fi

      - name: Save gh-pages cache
        if: (steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main') && env.has_changes == 'true'
        uses: actions/cache/save@v4
        with:
          path: gh-pages
          key: gh-pages-${{ github.repository }}-${{ github.run_id }}

      - name: Setup Pages
        if: (steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main') && env.has_changes == 'true'
        uses: actions/configure-pages@v5

      - name: Upload artifact
        if: (steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main') && env.has_changes == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'gh-pages'

      - name: Deploy to GitHub Pages
        if: (steps.check-pr.outputs.result == 'true' || github.ref == 'refs/heads/main') && env.has_changes == 'true'
        id: deployment
        uses: actions/deploy-pages@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
